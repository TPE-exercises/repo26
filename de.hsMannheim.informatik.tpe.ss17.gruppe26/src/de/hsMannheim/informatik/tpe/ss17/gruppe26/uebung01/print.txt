
//Bereit zum Kopieren und einf√ºgen

	int m=1;
	
	BTree_Node node = null;

	void printInorder() {

		for (int i = 0; i < 2*this.m+2; i++) {
			if (node.getNode(i) != null) {
				node.getNode(i).printInorder();
			}
			if (i < 2*m+1 && node.getValue(i) != null) {
				System.out.print(node.getValue(i) + " ");

			}
		}
	}

	void printPostorder() {

		for (int i = 0; i < 2*this.m+2; i++) {
			if (node.getNode(i) != null) {
				node.getNode(i).printPostorder();
			}
		}

		for (int i=0; 1<2*m+1 ;i++) {
			if (node.getValue(i) != null)
				System.out.print(node.getValue(i) + " ");
		}
	}

	void printPreorder() {
		for (int i = 0; i < 2*this.m+2; i++) {
			if (node.getValue(i) != null)
				System.out.print(node.getValue(i) + " ");
		}

		for (int i = 0; i < 2*this.m+2; i++) {
			if (node.getNode(i) != null) {
				node.getNode(i).printPreorder();
			}
		}
	}

	void printLevel(int level) {

		if (level == 0) {
			for (int i = 0; i < 2*this.m+2; i++) {
				if (node.getValue(i) != null) {
					System.out.print(node.getValue(i) + " ");
				}
			}
		} else {
			for (int i = 0; i < 2*this.m+2; i++) {
				if (node.getNode(i) != null) {
					if (i != 0) { // if the child is not the first child
						System.out.print(" | ");
					}

					node.getNode(i).printLevel(level - 1);
				}
			}
		}
	}

