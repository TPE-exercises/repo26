Überlegen Sie, wie sie die oben erstellten Klassen abändern und abstrahieren mussen, 
um regionale Unterschiede in der Zubereitung des Eises (Bezeichnung/ Zutaten/ Art/ etc.) 
sowie im Dialog mit dem Kunden widerspiegeln zu können.

//TODO Bezeichnung

->	Machen Sie die Klassen Eis und Eisdiele abstrakt. 
->	Am Bestellvorgang soll sich nichtsändern. 

->	Implementieren sie drei konkrete Klassen für jede regionale Eisdiele  
->	und jeweils drei konkrete individuelle Eisgerichte. 

Die jetzt abstrakte Klasse Eisdiele erhält hierfur eine weitere Methode: 
->	public abstract Eis erstellen(String typ);


->	Was muss hier geschehen? 

->	Brauchen Sie zusätzliche Klassen und Methoden? 
	->	Wenn Ja - welche? 
	Ja, eine Methode, welchen den Eispreis ermittelt in der abstracten Oberklasse, 
	damit dies nicht wiederholt in den einzelnen Eisdielen geschenen muss. 
	Aber nur, wenn Preis nicht von der Karte gelesen wird.
	
->	Was muss in Ihrer main() passieren um die jeweiligen lokalen Eisdielen anzusprechen? 
Für jede lokale Eisdiele muss EIN Eisdielenobjekt angelegt werden.

->	Müssen Sie bestehende Methoden andern oder verlagern? 


->	Notieren Sie die Vorteile dieser Lösung in Aufgabe 2 gegenüber der Lösung von Aufgabe 1.
In Aufgabe 1 war es nur möglich eine Eisdiele zu bedienen/erstellen, 
es sei den man kopiere den gesamten Code und ändere die Prints. -> UNSCHÖN (im Sinne der Vorlesung verboten!)

Nun ist es möglich, mit sehr wenig aufwand belibig viele weitere Eisdielen in jeder Region zu erstellen.
